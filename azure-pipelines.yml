# .NET Multienvironment


trigger:
- master

strategy:
  matrix:
    # linux:
    #  ridId: 'linux'
    #  imageName: 'ubuntu-latest'
    #mac:
    # ridId: 'macos'
    # imageName: 'macos-10.14'
    windows:
      ridId: 'win-x86'
      imageName: 'windows-2019'

pool:
  vmImage: $(imageName)

variables:
  project: '**/*.csproj'
  BuildConfiguration: 'Release'
  XamlColorSchemeGeneratorVersion: ''
  

steps:

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '3.1.100'
    workingDirectory: '$(System.DefaultWorkingDirectory)'


- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    workingDirectory: '$(System.DefaultWorkingDirectory)'


# #linux
# - bash: |
#     export IPADDR=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/')
#     echo "##vso[task.setvariable variable=IP_ADDR]$IPADDR"
#   condition: eq( variables['Agent.OS'], 'Linux' )
#   displayName: Get IP on Linux

# # macOS
# - bash: |
#     export IPADDR=$(ifconfig | grep 'en0' -A3 | tail -n1 | awk '{print $2}')
#     echo "##vso[task.setvariable variable=IP_ADDR]$IPADDR"
#   condition: eq( variables['Agent.OS'], 'Darwin' )
#   displayName: Get IP on macOS
# # Windows
# - powershell: |
#     Set-Variable -Name IPADDR -Value ((Get-NetIPAddress | ?{ $_.AddressFamily -eq "IPv4" -and !($_.IPAddress -match "169") -and !($_.IPaddress -match "127") } | Select-Object -First 1).IPAddress)
#     Write-Host "##vso[task.setvariable variable=IP_ADDR]$IPADDR"
#   condition: eq( variables['Agent.OS'], 'Windows_NT' )
#   displayName: Get IP on Windows




# - task: CmdLine@2
#   displayName: 'Run xaml colorscheme generator'
#   inputs:
#     script: |
#       echo The IP address is $(IP_ADDR)
#     workingDirectory: '$(System.DefaultWorkingDirectory)'
#     failOnStderr: true
# # "$(NuGetPackageRoot)xamlcolorschemegenerator\$(XamlColorSchemeGeneratorVersion)\tools\XamlColorSchemeGenerator.exe" "$(MSBuildProjectDirectory)\Styles\Themes\GeneratorParameters.json"


- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
   command: 'pack'
   packagesToPack: '**/*.csproj'
   nobuild: true
   arguments: |
              '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) '
   versioningScheme: 'byPrereleaseNumber'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop-$(ridId)'
    publishLocation: 'Container'







